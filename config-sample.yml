# The URL to request if there are no matches from the `switches` section below
# Note that enabling this will disable the messages that provide the switch config that is helpful for configuring switches
# See the `switches` section below for details on how to write the URL with substitutions
# Default value is unset - unknown requests are ignored but will write to console when using -vv
default_url: http://example.com?power={onoff}&hue={hue}&saturation={saturation}&brightness={brightness}&kelvin={kelvin}

# The interface to bind to. Binding to a specific interface generally isn't required, but can be useful if you are running
# multiple LIFX things on a single host, since only 1 thing can listen on each interface
# Default value is 0.0.0.0
interface: '0.0.0.0'

# Source IP address white-list - only respond to requests matching the IP address and network mask.
# Network mask is optional and assumed to be /32 if not specified. i.e. 192.168.0.1 and 192.168.0.1/32 are identical
# Default value is 0.0.0.0/0
ip_filter: '0.0.0.0/0'


# Configuration for each individual switch. If multiple lines match then each matching line is requested.
#
# The format is either simply this for a basic HTTP GET request
#     <switch configuration>: <URL template>
# or this, to specify more complicated requests
#     <switch configuration>:
#       url: <URL template>
#       method: <GET/PUT/POST/HEAD>  # Optional, defaults to POST if a `body` is specified, otherwise GET
#       body: <request body template>  # Optional
#       headers:  # Optional
#         Header-1: Value-1
#         Header-2: Value-2
#
# Where
#    <switch configuration>  is in the format [#h][,#s][,#b][,#k][,power] where # is a number and [] indicates optional
#                            This matches the configuration in the Logitech pop app, for the various color, brightness
#                            and on/off components.
#                            To find the configuration run `pophttp.py -vv` to show unknown requests, then add the
#                            "Pop HTTP" light into the pop switch config, pick a random color then press the pop switch
#                            and the configuration will be printed to the console.
#    <URL template>          is the URL to request. It can include parameter enclosed in curly braces to include them in the URL.
#    <request body template> is the contents of the request body/payload to be sent to the server. It can include
#                            parameter enclosed in curly braces to include them in the URL.
#
# For the <URL template> & <request body template>, the available parameters are:
#     {onoff}       the string `on` or `off` provided by the pop switch
#     {hue}         the color hue that was used to identify this switch
#     {saturation}  the color saturation that was used to identify this switch
#     {brightness}  the light brightness that was used to identify this switch
#     {kelvin}      the color temperature that was used to identify this switch
#     {{            just a single opening curly brace {
#     }}            just a single closing curly brace }
switches:
  500h,500s,32768b,3612k: http://example.com?r=2&power={onoff}&hue={hue}&saturation={saturation}&brightness={brightness}&kelvin={kelvin}
  500h,500s,32768b,3612k,on: http://example.com?r=3&power={onoff}&hue={hue}&saturation={saturation}&brightness={brightness}&kelvin={kelvin}
  500h,500s,32768b,3612k,off: http://another.example.com?r=4&power={onoff}&hue={hue}&saturation={saturation}&brightness={brightness}&kelvin={kelvin}
  on: http://another.example.com?r=5&power={onoff}&hue={hue}&saturation={saturation}&brightness={brightness}&kelvin={kelvin}
  off: http://another.example.com?r=6&power={onoff}&hue={hue}&saturation={saturation}&brightness={brightness}&kelvin={kelvin}


# Additional settings for each URL can be specified under the optional `endpoints` section with the name of the base URL to be applied to.
# This could be the top level hostname such as http://example.com, or a path under it, such as http://example.com/upstairs/bedroom/
# This section is optional and only required if you need to set special settings and multiple sections can be specified matching different URLs.

# HTTP(S) authentication mode to use
# Available values are:
#     basic: Basic HTTP authentication with a `username` and `password` parameter.
#    bearer: HTTP Bearer authentication with a `token` parameter
endpoints:
  http://example.com:
    auth: basic
    username: my.username
    password: my_password
    headers:
      Header-1: Value-1
      Header-2: Value-2

  http://another.example.com:
    auth: bearer
    token: ABC-XYZ
    headers:
      Header-1: Value-1
      Header-2: Value-2
